
#include<iostream>
using namespace std;
template<class T> class MyList;
template<class T> MyList<T> operator+(const MyList<T> &l1, const MyList<T> &l2); 
template<class T> MyList<T> operator+(const MyList<T> &l1, const T &item);
template<class T> ostream &operator<<(ostream &os, const MyList<T> &obj);

template<class T>
class MyList{
	friend MyList operator + <>(const MyList<T> &l1, const MyList<T> &l2); //合并两个MyList
    friend MyList operator + <>(const MyList<T> &l1, const T &item); //同push(T item)，但不修改l1，返回一个新数组
	friend ostream & operator<< <>(ostream &os, const MyList<T> &obj);//如果T是可以直接cout的类的话（比如int），按Python数组的格式输出MyList中的每一个元素，例如：
    // [1, 2, 5, 4, 1]
private:
	T *a;
	int size,r_size;
	void double_space();//数组大小不够的时候将数组大小翻倍的操作。
public:
	MyList()
	{
		size = 100,r_size=0;
		a=new T[size];
	}
	
	
	MyList(int num, const T &item);//将item重复num次填入数组中。
	MyList(const MyList &l);//深复制另外一个MyList。
    MyList(T* arr, int len);//以arr的前len个元素构造数组
	void push(const T &item);//将item添加在MyList最后。
	T pop();//将MyList中最后一个元素删除，并返回这个删除的元素。
	void insert(int index, const T &item);//将item插入到place处。
	void clean();//清空数组。
	int get_size();//返回MyList中元素的数量。
	void erase(int start, int end); //删除MyList中第start到第end位的元素，包括两边。
	T get_item(int index);//返回第index个元素。
	MyList get_item(int start, int end);//返回MyList中第start到第end位的元素，包括两边。此处需要像python一样接受负数，具体见测试代码。
	int count(const T &item);//返回MyList中和item相等的元素的个数。
	void remove(const T &item);//删除MyList中第一个和item相等的元素。
	MyList &operator = (const MyList &l);//赋值
	MyList &operator += (const T &item);//同push(T item)
	MyList &operator += (const MyList &l);//将一个MyList加入到本个MyList之后。
	T &operator [](int index);//返回第index个元素。
	void sort(bool less=true);//实现一个快速排序或归并排序，对支持比较运算符（>=<）的类进行排序。
    // 若less=true，按照从小到大排列，否则按从大到小排列
	void reverse();//将MyList的元素倒过来。

	~MyList(){delete [] a;}
};

template <class T>
void MyList<T>::double_space()
{   
	T *temp;
    temp=new T[size*2];
    size*=2;
    for(int i=0;i<=r_size;++i)
    {
        temp[i]=a[i];
    }
    delete [] a;
    for(int i=0;i<=r_size;++i)
    {
    	a[i]=temp[i];
	}
    
}


template<class T>//将item重复num次填入数组中。
MyList<T>::MyList(int num, const T &item){
	a=new T [size];
	r_size=num;	
	size=100;
	if(size<r_size) double_space();
	for (int i=0;i<num;++i)
	{
		a[i]=item;
	}
}

template<class T>//深复制另外一个MyList。
MyList<T>::MyList(const MyList<T> &l){
	size=l.size;
	a=new T [size];
	r_size= l.r_size;
	for (int i=0;i<size;++i)
	{
		a[i] = l.a[i];
	}
}


template <class T>//以arr的前len个元素构造数组
MyList<T>::MyList(T* arr, int len)
{

    size=100;
    a=new T[size];   
    r_size=len;
    for (int i=0;i<len;++i)
    {
        a[i]=arr[i];
    }
}

template<class T>
void MyList<T>::push(const T &item)//将item添加在MyList最后。
{
	if(size<=r_size) double_space();
    a[r_size]=item;
    ++r_size;
}

template<class T>
T MyList<T>::pop()//将MyList中最后一个元素删除，并返回这个删除的元素。
{
	try{
		if (r_size==0) throw 0;
		else 
		{
			T new_list;
			--r_size;
			new_list=a[r_size];
		}	
	}
	catch (int flag)
	{
		if(flag==0) cout<<"The list is empty"<<endl;
	}
}

template<class T>
void MyList<T>::insert(int index, const T &item)//将item插入到place处。
{
	try{
		if(size<=r_size) double_space();		
		if (index<0 || index>=r_size) throw 0;
		for (int i=r_size-1;i>=index;--i) a[i+1] = a[i];
		a[index] = item; 
	}
	catch (int flag)
	{
		if(flag==0) cout<<"Invalid index"<<endl;
	}
}

template <class T>
void MyList<T>::clean()
{
    r_size=0;
}

template <class T>
int MyList<T>::get_size()
{
    return r_size;
}

template<class T>//删除MyList中第start到第end位的元素，包括两边。
void MyList<T>::erase(int start, int end)
{
	try{
		if (start < 0) start=r_size+start;
		if (end < 0) end=r_size+end;		
		if (start<0 || start>end || end>r_size-1) throw 0;
		T *tmp=new T[r_size];
		for(int i=0;i<start;++i)
        {
        	tmp[i]=a[i];
        }
        for(int i=end+1;i<r_size;++i)
        {
        	tmp[start+i-(end+1)]=a[i];
		}
		a=tmp;
		delete [] tmp;
		r_size -= (end-start+1);
	}
	catch (int flag)
	{
		if(flag==0) cout<<"Invalid index"<<endl;
	}
}


template<class T>//返回第index个元素。
T MyList<T>::get_item(int index)
{
	try
	{
		if (index<0 || index>r_size-1) throw 0;
		return a[index];
	}
	catch (int flag)
	{
		if(flag==0) cout<<"Invalid index"<<endl;
	}
}

template<class T>
MyList<T> MyList<T>::get_item(int start, int end)//返回MyList中第start到第end位的元素，包括两边。此处需要像python一样接受负数，具体见测试代码。
{
	try{
		if (start<0) start+=r_size;
		if (end<0) end+=r_size;	
		if (end>=r_size||end<0||start<0||start>=r_size) throw 0;
		
		MyList tmp;
		if (start>end)
		{
			tmp.r_size=0;
			return tmp;
		}
		else
		{
			tmp.r_size=end-start+1;
			if (tmp.r_size>tmp.size)  tmp.double_space();
			for (int i=start;i<=end;++i)
			{
				tmp.a[i-start]=a[i];
			}
			return tmp;
		}
		
	}
	catch (int flag)
	{
		if(flag==0) cout<<"Invalid index"<<endl;
	}
}

template<class T>//返回MyList中和item相等的元素的个数。
int MyList<T>::count(const T &item){
	int counter=0;
	for (int i=0;i<r_size;++i)
	{
		if (a[i]==item) ++counter;
	}
	return counter;
}

template<class T>//删除MyList中第一个和item相等的元素。
void MyList<T>::remove(const T &item)
{
	int flag;
	for (int i=0;i<r_size;++i)
	{
		if (a[i]==item)
		{
			flag=i; break;
		}
	}
	if(flag==r_size) return;
	if (flag!=r_size)
	{
		for (int i=flag;i<r_size-1;++i) 
		{
			a[i]=a[i+1];
		}
		--r_size;
		return;
	}
}


template <class T>//合并两个MyList
MyList<T> operator+ (const MyList<T> &l1, const MyList<T> &l2)
{
    MyList<T> tmp;
    int add_size=l1.r_size+l2.r_size;
    while (add_size>add_size)
    {
        tmp.double_space();
    }
    for(int i=0;i<l1.r_size;++i)
    {
        tmp.a[i]=l1.a[i];
    }
    for(int i=0;i<l2.r_size;++i)
    {
        tmp.a[i+l1.r_size]=l2.a[i];
    }
    tmp.r_size=add_size;
    return tmp;
}

	
template<class T>//同push(T item)，但不修改l1，返回一个新数组
MyList<T> operator+(const MyList<T> &l1, const T &item)
{
	MyList<T> tmp=l1;
	if (tmp.r_size>tmp.size) tmp.double_space();	
	tmp.a[tmp.rize]=item;
	++tmp.r_size;	
	return tmp;
}
	
template<class T>//赋值
MyList<T> &MyList<T>::operator=(const MyList &l){
	if (this == &l) return *this;
	delete [] a;
	size=l.size;
	r_size=l.r_size;
	a = new T[size];
	for (int i=0;i<l.r_size;++i) a[i] = l.a[i];
	return *this;
}

template<class T>
MyList<T> &MyList<T>::operator+=(const T &item)//同push(T item)
{

	if (r_size>=size) double_space();
	a[r_size] = item;
	++r_size;	
	return *this;
}

template<class T>//将一个MyList加入到本个MyList之后。
MyList<T> &MyList<T>::operator+=(const MyList &l)
{
	r_size += l.r_size;
	while (r_size>size) double_space();
	for (int i=0;i<l.r_size;++i) a[r_size+i] = l.a[i];
	return *this;

}


template<class T>//返回第index个元素。
T &MyList<T>::operator[](int index)
{
	try{
		if (index<0 || index>r_size-1) throw 0;
		return a[index];
	}
	catch (int flag)
	{
		if(flag==0) cout<<"Invalid index"<<endl;
	}
}


template<class T>//如果T是可以直接cout的类的话（比如int），按Python数组的格式输出MyList中的每一个元素，例如：
    // [1, 2, 5, 4, 1]
ostream &operator<<(ostream &os, const MyList<T> &obj)
{
    if(obj.r_size>=0)
    {
		os<<"[";
    	for(int i=0;i<obj.r_size-1;++i)
    	{
        	os<<obj.a[i]<<",";
    	}
    	os<<obj.a[obj.r_size-1]<<"]";
    	return os;
    }
    else os<<"[]";
}

template <class T>
void MyList<T>::reverse()
{
	T *tmp;
    tmp=new T[size];
    for(int i=0;i<r_size;++i)
    {
        *(tmp+i)=a[r_size-1-i];
    }
    T *temp;
    temp=a;
    delete [] temp;
    a=tmp;
    
}

template<class T>
int divide(T a[], int low, int high)
{
	int k=a[low];
	do{
		while (low<high &&a[high]>=k) --high;
		if(low<high)
		{
		a[low]=a[high];
		++low;
		}
		while(low<high&&a[low]<=k)  ++low;
		if(low<high)
		{
		a[high]=a[low];
		--high;
		}
	}
	while(low!=high);
	a[low]=k;
	return low;
}


template<class T>
int quicksort(T q[], int low, int high)
{
	int mid;
	if (low >= high) return 0;
	mid=divide(q, low, high);
	quicksort(q, low, mid-1);
	quicksort(q, mid+1, high);
}


template<class T>
void MyList<T>::sort(bool less)
{
	quicksort(a,0,r_size-1);
	if (less!=true) 
	{
	   	T *tmp = new T[size];
		for (int i=0; i<=r_size;++i) tmp[i] = a[r_size-i];
		for (int i=0; i<=r_size;++i) a[i] = tmp[i];
	}
}


	
int main(){
	MyList<int> a, b;
	int i;
	for (i=0; i<5; ++i)
		a.push(i);
    // a = [0, 1, 2, 3, 4]
	a[3] = 15; // a = [0, 1, 2, 15, 4]
	a.sort(); // a = [0, 1, 2, 4, 15]
	a.reverse(); // a = [15, 4, 2, 1, 0]
	a += 12; // a = [15, 4, 2, 1, 0, 12]
	for (i=0; i<a.get_size(); ++i)
		cout<<a[i]<<endl;
    b = a.get_item(4, -3); // b = [] *若start > end，返回空数组
	b = a.get_item(3, -1); // b = [1, 0, 12] 
	a += b; // a = [15, 4, 2, 1, 0, 12, 1, 0, 12]
	for (i=0; i<a.get_size(); ++i)
		cout<<a.get_item(i)<<endl;
	cout<<a.count(5)<<endl;
	b.clean(); // b = []
	cout<<b.get_size()<<endl;
	a.erase(2, 5); // a = [15, 4, 1,0, 12]
	b = a + a; // b = [15, 4, 0, 12, 15, 4, 0, 12]
	b.insert(3, 116); // b = [15, 4, 0, 116, 12, 15, 4, 0, 12]

	b.remove(4); // b = [15, 0, 116, ...]
	cout<<b<<endl;
	MyList<double> c(10, 3.14);
	for (i=0; i<100; ++i)
		c.push(1.1*i);
	cout<<c.get_item(100, 105)<<endl;
	
	return 0;
}

